    type S3Object {
      bucket: String!
      region: String!
          key: String!
    }

    type BlockchainBlock {
        id: ID!
        dealID: String!
        marketplaceSignatureOnDeal: String!
        previousHashOnDeal: String!
        hashOnDeal: String!
        nonce: Int!
        blockchainBlockStatus: BlockchainBlockStatus
    }

    type Product {
        id: ID!
        name: String!
        modelNo: String!
        productImage: S3Object
        specificationURL: String!
        imageURL: String
        lastTenRatingAverage: Float
    }

    type Deal {
        dealID: ID!
        orderID: String!
        dealStatus: DealStatus!
        buyerID: String!
        producerID: String!
        dealTime: AWSTimestamp!
        dealPrice: Float!
        productRatingByBuyer: Float
        blockchainBlockID: String!
        blockchainBlockStatus: BlockchainBlockStatus!
    }

    type Notification {
        companyID: ID!
        notificationID: String!
        notificationTextRegular: String!
        notificationTextHighlighted: String!
    }

    interface Member {
        id: ID!
        name: String!
        creditRating: CreditRating!,
        yearsOfOperation: Int!,
        status: MemberStatus!
    }

    type Company implements Member {
        id: ID!
        name: String!
        creditRating: CreditRating!
        yearsOfOperation: Int!
        status: MemberStatus!
        orders(limit: Int, nextToken: String): OrdersConnection
	    offers(limit: Int, nextToken: String): OffersConnection
        creditSaleLimitForAAA: Int
        creditSaleLimitForAA: Int
        creditSaleLimitForA: Int
        creditSaleLimitForBBB: Int
        creditSaleLimitForBB: Int
        creditSaleLimitForB: Int

    }

    type Offer {
        companyId: ID!
        offerId: String!
        productID: String!
        available: Int!
        price: Int!
    }

    type Order {
        companyID: ID!
        orderID: String!
        productID: String!
        product: Product!
        status: OrderStatus!
        maxPrice: Float!,
        quantity: Int!
        bestOfferType: BestOfferEnum!
        secondBestOfferType: BestOfferEnum!
        minProductRating: Float
        isCashPayment: Boolean!
    }

    type ReOrderRule {
        companyID: ID!
        reorderRuleID: String!
        productID: String!
        product: Product!
        maxPrice: Float!
        bestOfferType: BestOfferEnum
        secondBestOfferType: BestOfferEnum!
        minProductRating: Float!
        isRuleEffective: Boolean!
        isCashPayment: Boolean!
        reorderLevel: Int!
        reorderQnty: Int!
    }

    enum CreditRating {
      AAA
      AA
      A
      BBB
      BB
      B
    }

    enum OfferStatus {
      EFFECTIVE
      ON_HOLD_30SEC
    }

    enum MemberStatus {
        ACTIVE
        SUSPENDED
        REJECTED
    }

    enum BlockchainBlockStatus {
      INITIATED
      CONFIRMED
      REJECTED
    }

    enum DealStatus {
        DEAL_MADE
        BLOCKCHAIN_CONFIRMED
        BLOCKCHAIN_REJECTED
    }

    enum OrderStatus {
        ORDER_PLACED
        CONFIRMED
        REJECTED
    }

  enum BestOfferEnum {
    LEAST_PRICE
    BEST_PRODUCT_RATING
  }