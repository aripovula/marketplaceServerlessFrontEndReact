enum BestOfferEnum {
	OPTIMAL
	HIGHESTRATING
	CHEAPEST
	CUSTOM
}

type BlockchainBlock {
	userID: ID!
	blockchainID: String!
	dealID: String!
	blockchainIndex: String!
	previousHashOnDeal: String!
	hashOnDeal: String!
	nonce: Int!
	blockchainBlockStatus: BlockchainBlockStatus
}

type BlockchainBlockConnection {
	items: [BlockchainBlock]
	nextToken: String
}

enum BlockchainBlockStatus {
	INITIATED
	CONFIRMED
	REJECTED
}

type Company implements Member {
	memberID: ID!
	companyID: String!
	name: String!
	creditRating: CreditRating!
	yearsOfOperation: Int!
	status: MemberStatus!
	orders(limit: Int, nextToken: String): OrderConnection
	reOrderRules(limit: Int, nextToken: String): ReOrderRuleConnection
	offers(limit: Int, nextToken: String): OfferConnection
	creditSaleLimitForAAA: Int
	creditSaleLimitForAA: Int
	creditSaleLimitForA: Int
	creditSaleLimitForBBB: Int
	creditSaleLimitForBB: Int
	creditSaleLimitForB: Int
}

type CompanyConnection {
	items: [Company]
	nextToken: String
}

input CreateBlockchainBlockInput {
	userID: ID!
	blockchainID: String!
	dealID: String!
	blockchainIndex: String!
	previousHashOnDeal: String!
	hashOnDeal: String!
	nonce: Int!
}

input CreateCompanyInput {
	memberID: ID!
	companyID: String!
	name: String!
	yearsOfOperation: Int!
	creditRating: CreditRating!
	status: MemberStatus!
	creditSaleLimitForAAA: Int
	creditSaleLimitForAA: Int
	creditSaleLimitForA: Int
	creditSaleLimitForBBB: Int
	creditSaleLimitForBB: Int
	creditSaleLimitForB: Int
}

input CreateDealInput {
	productID: ID!
	dealID: String!
	orderID: String!
	buyerID: String!
	producerID: String!
	dealTime: AWSTimestamp!
	dealPrice: Float!
	dealQuantity: Int!
	productRatingByBuyer: Float
	blockchainBlockID: String!
	blockchainBlockOfDeal: String
	dealStatus: DealStatus!
	blockchainBlockStatus: BlockchainBlockStatus!
}

input CreateNotificationInput {
	companyID: ID!
	notificationID: String!
	notificationTextRegular: String!
	notificationTextHighlighted: String!
}

input CreateOfferInput {
	companyID: ID!
	offerID: String!
	productID: String!
	price: Float!
	available: Int!
}

input CreateOrderInput {
	companyID: ID!
	orderID: String!
	productID: String!
	product: String!
	note: String
	dealPrice: Float
	maxPrice: Float!
	minProductRating: Float!
	quantity: Int!
	isCashPayment: Boolean!
	bestOfferType: BestOfferEnum!
	secondBestOfferType: BestOfferEnum!
	status: OrderStatus!
}

input CreateProductInput {
	name: String!
	modelNo: String!
	specificationURL: String!
	imageURL: String
	lastTenRatingAverage: String
}

input CreateReOrderRuleInput {
	companyID: ID!
	reorderRuleID: String!
	productID: String!
	product: String!
	maxPrice: Float!
	minProductRating: Float!
	isRuleEffective: Boolean!
	isCashPayment: Boolean!
	reorderLevel: Int!
	reorderQnty: Int!
	bestOfferType: BestOfferEnum
	secondBestOfferType: BestOfferEnum!
}

enum CreditRating {
	AAA
	AA
	A
	BBB
	BB
	B
}

type Deal {
	productID: ID!
	dealID: String!
	orderID: String!
	dealStatus: DealStatus!
	buyerID: String!
	producerID: String!
	dealTime: AWSTimestamp!
	dealPrice: Float!
	dealQuantity: Int!
	productRatingByBuyer: Float
	blockchainBlockID: String!
	blockchainBlockOfDeal: String
	blockchainBlockStatus: BlockchainBlockStatus!
}

type DealConnection {
	items: [Deal]
	nextToken: String
}

enum DealStatus {
	DEAL_MADE
	BLOCKCHAIN_CONFIRMED
	BLOCKCHAIN_REJECTED
}

input DeleteBlockchainBlockInput {
	userID: ID!
	blockchainID: String!
}

input DeleteCompanyInput {
	memberID: ID!
	companyID: String!
}

input DeleteDealInput {
	productID: ID!
	dealID: String!
}

input DeleteNotificationInput {
	companyID: ID!
	notificationID: String!
}

input DeleteOfferInput {
	companyID: ID!
	offerID: String!
}

input DeleteOrderInput {
	companyID: ID!
	orderID: String!
}

input DeleteProductInput {
	id: ID!
}

input DeleteReOrderRuleInput {
	companyID: ID!
	reorderRuleID: String!
}

interface Member {
	memberID: ID!
	name: String!
	creditRating: CreditRating!
	yearsOfOperation: Int!
	status: MemberStatus!
}

enum MemberStatus {
	ACTIVE
	SUSPENDED
	REJECTED
}

type Mutation {
	createOffer(input: CreateOfferInput!): Offer
	updateOffer(input: UpdateOfferInput!): Offer
	deleteOffer(input: DeleteOfferInput!): Offer
	createProduct(input: CreateProductInput!): Product
	updateProduct(input: UpdateProductInput!): Product
	deleteProduct(input: DeleteProductInput!): Product
	createReOrderRule(input: CreateReOrderRuleInput!): ReOrderRule
	updateReOrderRule(input: UpdateReOrderRuleInput!): ReOrderRule
	deleteReOrderRule(input: DeleteReOrderRuleInput!): ReOrderRule
	createNotification(input: CreateNotificationInput!): Notification
	updateNotification(input: UpdateNotificationInput!): Notification
	deleteNotification(input: DeleteNotificationInput!): Notification
	createOrder(input: CreateOrderInput!): Order
	updateOrder(input: UpdateOrderInput!): Order
	deleteOrder(input: DeleteOrderInput!): Order
	createDeal(input: CreateDealInput!): Deal
	updateDeal(input: UpdateDealInput!): Deal
	deleteDeal(input: DeleteDealInput!): Deal
	createBlockchainBlock(input: CreateBlockchainBlockInput!): BlockchainBlock
	updateBlockchainBlock(input: UpdateBlockchainBlockInput!): BlockchainBlock
	deleteBlockchainBlock(input: DeleteBlockchainBlockInput!): BlockchainBlock
	createCompany(input: CreateCompanyInput!): Company
	updateCompany(input: UpdateCompanyInput!): Company
	deleteCompany(input: DeleteCompanyInput!): Company
}

type Notification {
	companyID: ID!
	notificationID: String!
	notificationTextRegular: String!
	notificationTextHighlighted: String!
}

type NotificationConnection {
	items: [Notification]
	nextToken: String
}

type Offer {
	companyID: ID!
	offerID: String!
	productID: String!
	product: Product!
	price: Float!
	available: Int!
}

type OfferConnection {
	items: [Offer]
	nextToken: String
}

enum OfferStatus {
	EFFECTIVE
	ON_HOLD_30SEC
}

type Order {
	companyID: ID!
	orderID: String!
	productID: String!
	note: String
	dealPrice: Float
	maxPrice: Float!
	minProductRating: Float!
	quantity: Int!
	bestOfferType: BestOfferEnum!
	secondBestOfferType: BestOfferEnum!
	status: OrderStatus!
	isCashPayment: Boolean!
	product: Product
}

type OrderConnection {
	items: [Order]
	nextToken: String
}

enum OrderStatus {
	ORDER_PLACED
	DEAL_MADE
	BLOCKCHAINED
	REJECTED
}

type Product implements TradedItems {
	id: ID!
	name: String!
	modelNo: String!
	specificationURL: String!
	imageURL: String
	lastTenRatingAverage: String
}

type ProductConnection {
	items: [Product]
	nextToken: String
}

type Query {
	getOffer(companyID: ID!, offerID: String!): Offer
	listOffers(filter: TableOfferFilterInput, limit: Int, nextToken: String): OfferConnection
	getProduct(id: ID!): Product
	listProducts(filter: TableProductFilterInput, limit: Int, nextToken: String): ProductConnection
	getReOrderRule(companyID: ID!, reorderRuleID: String!): ReOrderRule
	listReOrderRules(filter: TableReOrderRuleFilterInput, limit: Int, nextToken: String): ReOrderRuleConnection
	getNotification(companyID: ID!, notificationID: String!): Notification
	listNotifications(filter: TableNotificationFilterInput, limit: Int, nextToken: String): NotificationConnection
	getOrder(companyID: ID!, orderID: String!): Order
	listOrders(filter: TableOrderFilterInput, limit: Int, nextToken: String): OrderConnection
	getDeal(productID: ID!, dealID: String!): Deal
	listDeals(filter: TableDealFilterInput, limit: Int, nextToken: String): DealConnection
	getBlockchainBlock(userID: ID!, blockchainID: String!): BlockchainBlock
	listBlockchainBlocks(filter: TableBlockchainBlockFilterInput, limit: Int, nextToken: String): BlockchainBlockConnection
	getCompany(memberID: ID!, companyID: String!): Company
	listCompanies(filter: TableCompanyFilterInput, limit: Int, nextToken: String): CompanyConnection
}

type ReOrderRule {
	companyID: ID!
	reorderRuleID: String!
	productID: String!
	product: Product!
	maxPrice: Float!
	bestOfferType: BestOfferEnum
	secondBestOfferType: BestOfferEnum!
	minProductRating: Float!
	isRuleEffective: Boolean!
	isCashPayment: Boolean!
	reorderLevel: Int!
	reorderQnty: Int!
}

type ReOrderRuleConnection {
	items: [ReOrderRule]
	nextToken: String
}

type Subscription {
	onCreateOffer(companyID: ID): Offer
		@aws_subscribe(mutations: ["createOffer"])
	onUpdateOffer(
		companyID: ID,
		offerID: String,
		productID: String,
		price: Float
	): Offer
		@aws_subscribe(mutations: ["updateOffer"])
	onDeleteOffer(
		companyID: ID,
		offerID: String,
		productID: String,
		price: Float
	): Offer
		@aws_subscribe(mutations: ["deleteOffer"])
	onCreateProduct(
		id: ID,
		name: String,
		modelNo: String,
		specificationURL: String
	): Product
		@aws_subscribe(mutations: ["createProduct"])
	onUpdateProduct(
		id: ID,
		name: String,
		modelNo: String,
		specificationURL: String
	): Product
		@aws_subscribe(mutations: ["updateProduct"])
	onDeleteProduct(
		id: ID,
		name: String,
		modelNo: String,
		specificationURL: String
	): Product
		@aws_subscribe(mutations: ["deleteProduct"])
	onCreateReOrderRule(
		companyID: ID,
		reorderRuleID: String,
		productID: String,
		maxPrice: Float,
		minProductRating: Float
	): ReOrderRule
		@aws_subscribe(mutations: ["createReOrderRule"])
	onUpdateReOrderRule(
		companyID: ID,
		reorderRuleID: String,
		productID: String,
		maxPrice: Float,
		minProductRating: Float
	): ReOrderRule
		@aws_subscribe(mutations: ["updateReOrderRule"])
	onDeleteReOrderRule(
		companyID: ID,
		reorderRuleID: String,
		productID: String,
		maxPrice: Float,
		minProductRating: Float
	): ReOrderRule
		@aws_subscribe(mutations: ["deleteReOrderRule"])
	onCreateNotification(
		companyID: ID,
		notificationID: String,
		notificationTextRegular: String,
		notificationTextHighlighted: String
	): Notification
		@aws_subscribe(mutations: ["createNotification"])
	onUpdateNotification(
		companyID: ID,
		notificationID: String,
		notificationTextRegular: String,
		notificationTextHighlighted: String
	): Notification
		@aws_subscribe(mutations: ["updateNotification"])
	onDeleteNotification(
		companyID: ID,
		notificationID: String,
		notificationTextRegular: String,
		notificationTextHighlighted: String
	): Notification
		@aws_subscribe(mutations: ["deleteNotification"])
	onCreateOrder(
		companyID: ID,
		orderID: String,
		productID: String,
		maxPrice: Float,
		minProductRating: Float
	): Order
		@aws_subscribe(mutations: ["createOrder"])
	onUpdateOrder(
		companyID: ID,
		orderID: String,
		productID: String,
		maxPrice: Float,
		minProductRating: Float
	): Order
		@aws_subscribe(mutations: ["updateOrder"])
	onDeleteOrder(
		companyID: ID,
		orderID: String,
		productID: String,
		maxPrice: Float,
		minProductRating: Float
	): Order
		@aws_subscribe(mutations: ["deleteOrder"])
	onCreateDeal(
		productID: ID,
		dealID: String,
		orderID: String,
		buyerID: String,
		producerID: String
	): Deal
		@aws_subscribe(mutations: ["createDeal"])
	onUpdateDeal(
		productID: ID,
		dealID: String,
		orderID: String,
		buyerID: String,
		producerID: String
	): Deal
		@aws_subscribe(mutations: ["updateDeal"])
	onDeleteDeal(
		productID: ID,
		dealID: String,
		orderID: String,
		buyerID: String,
		producerID: String
	): Deal
		@aws_subscribe(mutations: ["deleteDeal"])
	onCreateBlockchainBlock(
		userID: ID,
		blockchainID: String,
		dealID: String,
		blockchainIndex: String,
		previousHashOnDeal: String
	): BlockchainBlock
		@aws_subscribe(mutations: ["createBlockchainBlock"])
	onUpdateBlockchainBlock(
		userID: ID,
		blockchainID: String,
		dealID: String,
		blockchainIndex: String,
		previousHashOnDeal: String
	): BlockchainBlock
		@aws_subscribe(mutations: ["updateBlockchainBlock"])
	onDeleteBlockchainBlock(
		userID: ID,
		blockchainID: String,
		dealID: String,
		blockchainIndex: String,
		previousHashOnDeal: String
	): BlockchainBlock
		@aws_subscribe(mutations: ["deleteBlockchainBlock"])
	onCreateCompany(
		memberID: ID,
		companyID: String,
		name: String,
		yearsOfOperation: Int,
		creditSaleLimitForAAA: Int
	): Company
		@aws_subscribe(mutations: ["createCompany"])
	onUpdateCompany(
		memberID: ID,
		companyID: String,
		name: String,
		yearsOfOperation: Int,
		creditSaleLimitForAAA: Int
	): Company
		@aws_subscribe(mutations: ["updateCompany"])
	onDeleteCompany(
		memberID: ID,
		companyID: String,
		name: String,
		yearsOfOperation: Int,
		creditSaleLimitForAAA: Int
	): Company
		@aws_subscribe(mutations: ["deleteCompany"])
}

input TableBlockchainBlockFilterInput {
	userID: TableIDFilterInput
	blockchainID: TableStringFilterInput
	dealID: TableStringFilterInput
	blockchainIndex: TableStringFilterInput
	previousHashOnDeal: TableStringFilterInput
	hashOnDeal: TableStringFilterInput
	nonce: TableIntFilterInput
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableCompanyFilterInput {
	memberID: TableIDFilterInput
	companyID: TableStringFilterInput
	name: TableStringFilterInput
	yearsOfOperation: TableIntFilterInput
	creditSaleLimitForAAA: TableIntFilterInput
	creditSaleLimitForAA: TableIntFilterInput
	creditSaleLimitForA: TableIntFilterInput
	creditSaleLimitForBBB: TableIntFilterInput
	creditSaleLimitForBB: TableIntFilterInput
	creditSaleLimitForB: TableIntFilterInput
}

input TableDealFilterInput {
	productID: TableIDFilterInput
	dealID: TableStringFilterInput
	orderID: TableStringFilterInput
	buyerID: TableStringFilterInput
	producerID: TableStringFilterInput
	dealTime: TableIntFilterInput
	dealPrice: TableFloatFilterInput
	dealQuantity: TableIntFilterInput
	productRatingByBuyer: TableFloatFilterInput
	blockchainBlockID: TableStringFilterInput
	blockchainBlockOfDeal: TableStringFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableNotificationFilterInput {
	companyID: TableIDFilterInput
	notificationID: TableStringFilterInput
	notificationTextRegular: TableStringFilterInput
	notificationTextHighlighted: TableStringFilterInput
}

input TableOfferFilterInput {
	companyID: TableIDFilterInput
	offerID: TableStringFilterInput
	productID: TableStringFilterInput
	price: TableFloatFilterInput
	available: TableIntFilterInput
}

input TableOrderFilterInput {
	companyID: TableIDFilterInput
	orderID: TableStringFilterInput
	productID: TableStringFilterInput
	note: String
	dealPrice: Float
	maxPrice: TableFloatFilterInput
	minProductRating: TableFloatFilterInput
	quantity: TableIntFilterInput
	isCashPayment: TableBooleanFilterInput
	bestOfferType: TableStringFilterInput
}

input TableProductFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
	modelNo: TableStringFilterInput
	specificationURL: TableStringFilterInput
}

input TableReOrderRuleFilterInput {
	companyID: TableIDFilterInput
	reorderRuleID: TableStringFilterInput
	productID: TableStringFilterInput
	maxPrice: TableFloatFilterInput
	minProductRating: TableFloatFilterInput
	isRuleEffective: TableBooleanFilterInput
	isCashPayment: TableBooleanFilterInput
	reorderLevel: TableIntFilterInput
	reorderQnty: TableIntFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

interface TradedItems {
	id: ID!
	name: String!
	specificationURL: String!
}

input UpdateBlockchainBlockInput {
	userID: ID!
	blockchainID: String!
	dealID: String
	blockchainIndex: String
	previousHashOnDeal: String
	hashOnDeal: String
	nonce: Int
}

input UpdateCompanyInput {
	memberID: ID!
	companyID: String!
	name: String
	yearsOfOperation: Int
	creditSaleLimitForAAA: Int
	creditSaleLimitForAA: Int
	creditSaleLimitForA: Int
	creditSaleLimitForBBB: Int
	creditSaleLimitForBB: Int
	creditSaleLimitForB: Int
}

input UpdateDealInput {
	productID: ID!
	dealID: String!
	orderID: String
	buyerID: String
	producerID: String
	dealTime: AWSTimestamp
	dealPrice: Float
	dealQuantity: Int
	productRatingByBuyer: Float
	blockchainBlockID: String
}

input UpdateNotificationInput {
	companyID: ID!
	notificationID: String!
	notificationTextRegular: String
	notificationTextHighlighted: String
}

input UpdateOfferInput {
	companyID: ID!
	offerID: String!
	productID: String
	price: Float
	available: Int
}

input UpdateOrderInput {
	companyID: ID!
	orderID: String!
	productID: String
	product: String
	note: String
	dealPrice: Float
	maxPrice: Float
	minProductRating: Float
	quantity: Int
	isCashPayment: Boolean
	status: OrderStatus
	bestOfferType: BestOfferEnum
	secondBestOfferType: BestOfferEnum
}

input UpdateProductInput {
	id: ID!
	name: String
	modelNo: String
	specificationURL: String
}

input UpdateReOrderRuleInput {
	companyID: ID!
	reorderRuleID: String!
	productID: String
	product: String
	maxPrice: Float
	minProductRating: Float
	isRuleEffective: Boolean
	isCashPayment: Boolean
	reorderLevel: Int
	reorderQnty: Int
	bestOfferType: BestOfferEnum
	secondBestOfferType: BestOfferEnum
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}